{"name": "test_login_success", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: cannot find Chrome binary\nStacktrace:\n#0 0x5c6b1e2b74e3 <unknown>\n#1 0x5c6b1dfe6c76 <unknown>\n#2 0x5c6b1e00d757 <unknown>\n#3 0x5c6b1e00c029 <unknown>\n#4 0x5c6b1e04accc <unknown>\n#5 0x5c6b1e04a47f <unknown>\n#6 0x5c6b1e041de3 <unknown>\n#7 0x5c6b1e0172dd <unknown>\n#8 0x5c6b1e01834e <unknown>\n#9 0x5c6b1e2773e4 <unknown>\n#10 0x5c6b1e27b3d7 <unknown>\n#11 0x5c6b1e285b20 <unknown>\n#12 0x5c6b1e27c023 <unknown>\n#13 0x5c6b1e24a1aa <unknown>\n#14 0x5c6b1e2a06b8 <unknown>\n#15 0x5c6b1e2a0847 <unknown>\n#16 0x5c6b1e2b0243 <unknown>\n#17 0x7c091b64baa4 <unknown>\n#18 0x7c091b6d8c3c <unknown>", "trace": "request = <SubRequest 'driver' for <Function test_login_success>>\n\n    @pytest.fixture\n    def driver(request):\n        browser = request.config.getoption(\"--browser\")\n        headless = request.config.getoption(\"--headless\")\n    \n        if browser == \"chrome\":\n            options = Options()\n            if headless:\n                options.add_argument(\"--headless\")\n                options.add_argument(\"--disable-gpu\")\n                options.add_argument(\"--no-sandbox\")\n                options.add_argument(\"--disable-dev-shm-usage\")\n    \n            service = Service(ChromeDriverManager().install())\n>           driver = webdriver.Chrome(service=service, options=options)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nconftest.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv/lib/python3.12/site-packages/selenium/webdriver/chrome/webdriver.py:47: in __init__\n    super().__init__(\nvenv/lib/python3.12/site-packages/selenium/webdriver/chromium/webdriver.py:69: in __init__\n    super().__init__(command_executor=executor, options=options)\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:257: in __init__\n    self.start_session(capabilities)\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:356: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x73d499ed37d0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: cannot find Chrome binary\",\"stac...\\\\n#16 0x5c6b1e2b0243 \\\\u003Cunknown>\\\\n#17 0x7c091b64baa4 \\\\u003Cunknown>\\\\n#18 0x7c091b6d8c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: cannot find Chrome binary\nE       Stacktrace:\nE       #0 0x5c6b1e2b74e3 <unknown>\nE       #1 0x5c6b1dfe6c76 <unknown>\nE       #2 0x5c6b1e00d757 <unknown>\nE       #3 0x5c6b1e00c029 <unknown>\nE       #4 0x5c6b1e04accc <unknown>\nE       #5 0x5c6b1e04a47f <unknown>\nE       #6 0x5c6b1e041de3 <unknown>\nE       #7 0x5c6b1e0172dd <unknown>\nE       #8 0x5c6b1e01834e <unknown>\nE       #9 0x5c6b1e2773e4 <unknown>\nE       #10 0x5c6b1e27b3d7 <unknown>\nE       #11 0x5c6b1e285b20 <unknown>\nE       #12 0x5c6b1e27c023 <unknown>\nE       #13 0x5c6b1e24a1aa <unknown>\nE       #14 0x5c6b1e2a06b8 <unknown>\nE       #15 0x5c6b1e2a0847 <unknown>\nE       #16 0x5c6b1e2b0243 <unknown>\nE       #17 0x7c091b64baa4 <unknown>\nE       #18 0x7c091b6d8c3c <unknown>\n\nvenv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException"}, "start": 1750916133046, "stop": 1750916133046, "uuid": "7d97d67c-224e-4043-9cc3-e9e13e821008", "historyId": "86600b41e86dab7ca99f472fa61e4b05", "testCaseId": "86600b41e86dab7ca99f472fa61e4b05", "fullName": "tests.test_login#test_login_success", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "codespaces-194276"}, {"name": "thread", "value": "10871-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}